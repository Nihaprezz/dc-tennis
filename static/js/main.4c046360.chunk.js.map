{"version":3,"sources":["tennis.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","latitude","longitude","width","height","zoom","viewport","setViewport","currentCourt","setCurrentCourt","className","href","mapboxApiAccessToken","process","mapStyle","onViewportChange","tennisData","map","court","key","attributes","ID","geometry","y","x","onClick","src","tennisIcon","alt","onClose","style","fontWeight","NAME","ADDRESS","CONDITION","COURTS","SURFACE","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"u/SAAAA,EAAOC,QAAU,IAA0B,oC,qLCmE5BC,MA5Df,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,SAAU,kBACVC,WAAY,kBACZC,MAAO,QACPC,OAAQ,OACRC,KAAM,KANK,mBACNC,EADM,KACIC,EADJ,OAS2BP,mBAAS,MATpC,mBASNQ,EATM,KASQC,EATR,KAYb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,2DACA,uBAAGC,KAAK,kEAAR,QACA,uBAAGA,KAAK,0CAAR,WAGF,kBAAC,IAAD,iBAAgBL,EAAhB,CAA0BM,qBAtBjBC,+FAuBTC,SAAS,sDACTC,iBAAkB,SAACT,GAAD,OAAcC,EAAYD,MAEzCU,IAAkBC,KAAI,SAAAC,GACrB,OACE,kBAAC,IAAD,CAAQC,IAAKD,EAAME,WAAWC,GAC9BpB,SAAUiB,EAAMI,SAASC,EACzBrB,UAAWgB,EAAMI,SAASE,GAE1B,4BAAQd,UAAU,aAAae,QAAS,kBAAMhB,EAAgBS,KAC5D,yBAAKQ,IAAKC,IAAYC,IAAI,qBAO/BpB,EACC,kBAAC,IAAD,CACAP,SAAUO,EAAac,SAASC,EAChCrB,UAAWM,EAAac,SAASE,EACjCK,QAAS,kBAAMpB,EAAgB,QAC7B,6BACE,uBAAGqB,MAAO,CAACC,WAAY,SAAUvB,EAAaY,WAAWY,MACzD,8CAAgBxB,EAAaY,WAAWa,UACxC,gDAAkBzB,EAAaY,WAAWc,UAA1C,sBAAiE1B,EAAaY,WAAWe,SACzF,8CAAgB3B,EAAaY,WAAWgB,YAG3C,QC7CSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c046360.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tennis.af9b144e.svg\";","import React, { useState } from 'react';\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\"\nimport * as tennisData from \"./data/tennis-courts.json\"\nimport tennisIcon from \"./tennis.svg\"\n\nconst apiKey = process.env.REACT_APP_MAPBOX_TOKEN \n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: 38.89543914794922, \n    longitude: -77.03128051757812,\n    width: \"100vw\", \n    height: \"93vh\",\n    zoom: 11\n  })\n\n  const [currentCourt, setCurrentCourt] = useState(null)\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Washington DC Tennis Courts</h1>\n        <a href=\"https://opendata.dc.gov/datasets/tennis-court-sites/geoservice\">Data</a>\n        <a href=\"https://github.com/Nihaprezz/dc-tennis\">Github</a>\n      </div>\n\n      <ReactMapGL {...viewport} mapboxApiAccessToken={apiKey}\n      mapStyle=\"mapbox://styles/nihaprezz/ck9w5z0yu05111intcxb0x1v2\"\n      onViewportChange={(viewport) => setViewport(viewport)}>\n        \n        {tennisData.courts.map(court => {\n          return (\n            <Marker key={court.attributes.ID}\n            latitude={court.geometry.y}\n            longitude={court.geometry.x}>\n\n            <button className=\"marker-btn\" onClick={() => setCurrentCourt(court)}>\n              <img src={tennisIcon} alt=\"Tennis Icon\"/>\n            </button>\n\n          </Marker>\n          )\n        })}\n\n        {currentCourt ? (\n          <Popup \n          latitude={currentCourt.geometry.y}\n          longitude={currentCourt.geometry.x}\n          onClose={() => setCurrentCourt(null)}>\n            <div>\n              <p style={{fontWeight: 'bold'}}>{currentCourt.attributes.NAME}</p>\n              <p>{`Address: ${currentCourt.attributes.ADDRESS}`}</p>\n              <p>{`Condition: ${currentCourt.attributes.CONDITION} / Courts: ${currentCourt.attributes.COURTS}`}</p>\n              <p>{`Surface: ${currentCourt.attributes.SURFACE}`}</p>\n            </div>\n          </Popup>\n        ): null}\n\n      </ReactMapGL>\n\n{/* \n      Icons made by <a href=\"https://www.flaticon.com/authors/those-icons\" title=\"Those Icons\">Those Icons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}